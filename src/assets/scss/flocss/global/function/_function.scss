@use 'sass:math';

// 初期設定
$base-font-size: 16;
$viewport-min: 360;
$viewport-max: 1400;

// 値から単位を削除する関数
@function remove-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

// remをpxのように使う関数
@function rem($rem-font-size) {
  @return math.div($rem-font-size, $base-font-size) * 1rem;
}

// e.q.
// p {
// 	font-size: rem(16);
// }

// vwをpxのように使う関数
@function vw($vw-font-size, $viewport-max) {
  $per: math.div(remove-unit($vw-font-size), remove-unit($viewport));
  @return $per * 100vw;
}

// e.q.
// p {
// 	font-size: vw(32);
// }

// pxをfluidに扱う関数
@function divide-root($number) {
  @return math.div(remove-unit($number), $base-font-size);
}

@function fluid($min-font-size, $max-font-size) {
  $min-unit: rem($min-font-size);
  $max-unit: rem($max-font-size);
  $min-number: divide-root($min-font-size);
  $max-number: divide-root($max-font-size);
  $min-breakpoint: divide-root($viewport-min);
  $max-breakpoint: divide-root($viewport-max);
  $slope: math.div(($max-number - $min-number), ($max-breakpoint - $min-breakpoint));
  $calc-rem: ($min-breakpoint * -1 * $slope + $min-number) * 1rem;
  $calc-vw: ($slope * 100) * 1vw;
  @return clamp($min-unit, $calc-rem + $calc-vw, $max-unit);
}

// e.q.
// p {
// 	font-size: fluid(10, 16);
// }
